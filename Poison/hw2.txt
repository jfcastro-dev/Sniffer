CSE363: Offensive Security, Spring 2020

Homework 2: DNS poisoning
------------------------------------------------------------------------------

Submission deadline: 3/13/2020 11:59pm EDT
Submission through: https://blackboard.stonybrook.edu


In this assignment you will develop an on-path DNS poisoning tool using Scapy.
The tool, named 'dnspoison', will capture the traffic from a network interface
in promiscuous mode, and attempt to inject forged responses to selected DNS A
requests with the goal of poisoning the cache of the victim's resolver.

Your program should conform to the following specification:

dnspoison.py [-i interface] [-f hostnames] [expression]

-i  Listen on network device <interface> (e.g., eth0). If not specified,
    dnspoison should select a default interface to listen on. The same
    interface should be used for packet injection.

-f  Read a list of IP address and hostname pairs specifying the hostnames to
    be hijacked. If '-f' is not specified, dnspoison should forge replies to
    all observed requests with the local machine's IP address as an answer.

The optional <expression> argument is a BPF filter that specifies a subset of
the traffic to be monitored. This option is useful for targeting a single
victim or a group of victims.

The <hostnames> file should contain one IP and hostname pair per line,
separated by whitespace, in the following format:
10.6.6.6      foo.example.com
10.6.6.6      bar.example.com
192.168.66.6  www.cs.stonybrook.edu

Pay attention to the time needed for generating the spoofed response! Your
code should be fast enough so that the injected reply reaches the victim
sooner than the server's real response. The spoofed packet and content should
also be valid according to the initial DNS request, and the forged response
should be accepted and processed normally by the victim.


What to submit:

A tarball (.tar.gz) with:
- all required source code files
- a pcap trace containing one or more successful poisoning attacks generated
  using your dnspoison tool
- an ASCII file named README with a brief description of your program,
  and some example output from a test run


Hints

- Scapy has great online documentation:
  https://scapy.readthedocs.io/en/latest/

- Mind your spoofed packet's header fields and checksums!

- Think about what fields should remain the same or may differ between the
  spoofed and actual response packets.

- An easy way to test your implementation is using two hosts: the attacker can
  be either your real machine or a VM, and the victim can be a different VM.
  In both cases, the attacker will be in a position to sniff the victim's
  traffic and inject packets towards the victim, i.e., perform a
  man-on-the-side attack. Alternatively, you can also use ARP spoofing to
  perform a man-in-the-middle attack.

- If your host OS is configured to use a fast DNS server (e.g., Google's
  8.8.8.8), these tend to be very fast and have an RTT of just 3-4ms, so
  reliably winning the race will require carefully tuned code. Try ping'ing
  the DNS server to see the RTT. What you can do is pick a server that is "far
  away", e.g., 30-40ms away. Here is a list of free public DNS servers:
  https://twitgoo.com/best-free-dns-servers/
  Many of them have very low latency from SBU, but there are some in the
  30-40ms range (e.g., Alternate DNS, OpenNIC, SmartViper) so your attack
  should be reliable with those. Yandex or puntCAT should be even easier, as
  they are in the 100ms range.

- If you still cannot win the race in your setup, you are allowed to "slow
  down" the incoming packets to test your code (e.g., using NetfilterQueue or
  any other method you prefer).
